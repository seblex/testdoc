// Package main –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç CLI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
package main

import (
	"flag"
	"fmt"
	"os"
	"strings"

	"github.com/seblex/testdoc"
	"github.com/seblex/testdoc/pkg/types"
)

const version = "1.0.0"

func main() {
	var (
		outputFile   = flag.String("output", "test-documentation.md", "–§–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
		configFile   = flag.String("config", "", "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YAML (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
		showVersion  = flag.Bool("version", false, "–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é")
		showHelp     = flag.Bool("help", false, "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
		filterType   = flag.String("type", "", "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç–µ—Å—Ç–æ–≤ (unit, integration, functional, e2e, performance, security, regression, smoke)")
		filterAuthor = flag.String("author", "", "–§–∏–ª—å—Ç—Ä –ø–æ –∞–≤—Ç–æ—Ä—É")
		filterTags   = flag.String("tags", "", "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
	)

	flag.Usage = func() {
		fmt.Fprintf(os.Stderr, "TestDoc v%s - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è Go —Ç–µ—Å—Ç–æ–≤\n\n", version)
		fmt.Fprintf(os.Stderr, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: %s [–æ–ø—Ü–∏–∏] [–ø—É—Ç—å]\n\n", os.Args[0])
		fmt.Fprintf(os.Stderr, "–í–ê–ñ–ù–û: –í—Å–µ –æ–ø—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –î–û –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!\n\n")
		fmt.Fprintf(os.Stderr, "–û–ø—Ü–∏–∏:\n")
		flag.PrintDefaults()
		fmt.Fprintf(os.Stderr, "\n–ü—Ä–∏–º–µ—Ä—ã:\n")
		fmt.Fprintf(os.Stderr, "  %s                                    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n", os.Args[0])
		fmt.Fprintf(os.Stderr, "  %s ./examples                         # –ê–Ω–∞–ª–∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ examples\n", os.Args[0])
		fmt.Fprintf(os.Stderr, "  %s -output docs.md ./tests            # –° —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞\n", os.Args[0])
		fmt.Fprintf(os.Stderr, "  %s -config config.yaml                # –° –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n", os.Args[0])
		fmt.Fprintf(os.Stderr, "  %s -type unit -author 'John Doe'      # –° —Ñ–∏–ª—å—Ç—Ä–∞–º–∏\n", os.Args[0])
		fmt.Fprintf(os.Stderr, "  %s -tags 'api,database' ./internal    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º\n", os.Args[0])
		fmt.Fprintf(os.Stderr, "\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤:\n")
		for _, testType := range testdoc.GetSupportedTestTypes() {
			fmt.Fprintf(os.Stderr, "  - %s\n", testType)
		}
	}

	flag.Parse()

	if *showVersion {
		fmt.Printf("TestDoc v%s\n", version)
		os.Exit(0)
	}

	if *showHelp {
		flag.Usage()
		os.Exit(0)
	}

	path := "."
	if flag.NArg() > 0 {
		path = flag.Arg(0)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	var config *types.Config
	var err error

	if *configFile != "" {
		config, err = testdoc.LoadConfig(*configFile)
		if err != nil {
			fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v\n", err)
			os.Exit(1)
		}
	} else {
		config = testdoc.DefaultConfig()
	}

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	err = testdoc.ValidateConfig(config)
	if err != nil {
		fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v\n", err)
		os.Exit(1)
	}

	// –ü–∞—Ä—Å–∏–º —Ç–µ—Å—Ç—ã
	result, err := testdoc.ParseDirectory(path, config)
	if err != nil {
		fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Å—Ç–æ–≤: %v\n", err)
		os.Exit(1)
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
	if *filterType != "" {
		testType := types.TestType(*filterType)
		if !testdoc.IsValidTestType(testType) {
			fmt.Fprintf(os.Stderr, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: %s\n", *filterType)
			fmt.Fprintf(os.Stderr, "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: %v\n", testdoc.GetSupportedTestTypes())
			os.Exit(1)
		}
		filter := testdoc.NewFilter()
		result = filter.ByType(result, testType)
	}

	if *filterAuthor != "" {
		filter := testdoc.NewFilter()
		result = filter.ByAuthor(result, *filterAuthor)
	}

	if *filterTags != "" {
		tags := strings.Split(*filterTags, ",")
		for i, tag := range tags {
			tags[i] = strings.TrimSpace(tag)
		}
		filter := testdoc.NewFilter()
		result = filter.ByTags(result, tags)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã —Ç–µ—Å—Ç—ã
	if result.Stats.TotalTests == 0 {
		fmt.Fprintf(os.Stderr, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %s\n", path)
		if *filterType != "" || *filterAuthor != "" || *filterTags != "" {
			fmt.Fprintf(os.Stderr, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.\n")
		}
		os.Exit(1)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
	markdown := testdoc.GenerateMarkdown(result, config)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
	err = testdoc.WriteToFile(markdown, *outputFile)
	if err != nil {
		fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: %v\n", err)
		os.Exit(1)
	}

	// –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	fmt.Printf("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: %s\n", *outputFile)
	fmt.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
	fmt.Printf("   - –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: %d\n", result.Stats.TotalTests)
	fmt.Printf("   - –ê–∫—Ç–∏–≤–Ω—ã—Ö: %d\n", result.Stats.ActiveTests)
	fmt.Printf("   - –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö: %d\n", result.Stats.SkippedTests)
	fmt.Printf("   - –ü–∞–∫–µ—Ç–æ–≤: %d\n", result.Stats.PackageCount)

	if len(result.Stats.TypeDistribution) > 0 {
		fmt.Printf("   - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:\n")
		for testType, count := range result.Stats.TypeDistribution {
			percentage := float64(count) / float64(result.Stats.TotalTests) * 100
			fmt.Printf("     * %s: %d (%.1f%%)\n", testType, count, percentage)
		}
	}

	// –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
	os.Exit(0)
}
